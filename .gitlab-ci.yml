stages:
  - analysis
  - build
  - test
  - deploy

variables:
  # Feel free to choose the image that suits you best.
  # blang/latex:latest ... Former image used in this template. No longer maintained by author.
  # listx/texlive:2020 ... The default, referring to TexLive 2020. Current at least to 2021-02-02.

  # Additional alternatives with high Docker pull counts:
  # thomasweise/docker-texlive-full
  # thomasweise/texlive
  # adnrv/texlive
  LATEX_IMAGE: listx/texlive:2020
  PFLICHTENHEFT_TEX_PATH: "./Documentation/Requirement_specification_document/"
  BENUTZERHANDBUCH_TEX_PATH: "./Documentation/"
  CONFIGURATION: "Debug"
  COVERAGE_FLAG: "XPlat Code Coverage"
  PUBLIC_URL: "/-/$CI_PROJECT_NAME/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/public"

create_requirements_document:
  image: $LATEX_IMAGE
  stage: build
  script:
    - cd $PFLICHTENHEFT_TEX_PATH
    - latexmk -pdf Pflichtenheft.tex

  artifacts:
    paths:
      - PFLICHTENHEFT_TEX_PATH/Pflichtenheft.pdf

  only: 
    changes:
      - Documentation

create_user_manual:
  image: $LATEX_IMAGE
  stage: build
  script:
    - cd $BENUTZERHANDBUCH_TEX_PATH
    - latexmk -pdf Benutzerhandbuch.tex

  artifacts:
    paths:
      - BENUTZERHANDBUCH_TEX_PATH/Benutzerhandbuch.pdf

  only: 
    changes:
      - Documentation

sonarqube-check:
  image: mcr.microsoft.com/dotnet/core/sdk:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
      - "apt-get update"
      - "apt-get install --yes openjdk-11-jre"
      - "dotnet tool install --global dotnet-sonarscanner"
      - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
      - "dotnet sonarscanner begin /k:\"Deserts-of-Dune\" /d:sonar.login=\"$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\" "
      - "dotnet build"
      - "dotnet sonarscanner end /d:sonar.login=\"$SONAR_TOKEN\""
  allow_failure: true
  only:
    - develop # or the name of your main branch

test-with-coverage:
  image: mcr.microsoft.com/dotnet/sdk:latest
  stage: test
  
  script:
    - 'dotnet test DesertsOfDune/TestProject/UnitTestSuite.csproj -c $CONFIGURATION -r $CI_PROJECT_DIR/cobertura --collect:"$COVERAGE_FLAG"'

  artifacts:
    paths:
      - $CI_PROJECT_DIR/cobertura/*/coverage.cobertura.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/cobertura/*/coverage.cobertura.xml

deploy-coverage-report:
  image: mcr.microsoft.com/dotnet/sdk:latest
  stage: deploy
  needs:
    - job: test-with-coverage
      artifacts: true
  environment:
    name: CoverageReport
  script:
    - dotnet tool install --tool-path . dotnet-reportgenerator-globaltool
    - mkdir -p coverageReport
    - ./reportgenerator "-reports:$CI_PROJECT_DIR/cobertura/*/coverage.cobertura.xml" "-targetdir:coverageReport" "-reporttypes:Html"
  artifacts:
    paths:
      - coverageReport